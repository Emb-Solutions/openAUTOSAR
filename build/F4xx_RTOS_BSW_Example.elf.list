
../build_executables/F4xx_RTOS_BSW_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000004  20000000  08000390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000004  08000394  00000000  2**0
                  ALLOC
  5 ._user_heap_stack 00000604  20000004  08000394  00020004  2**0
                  ALLOC
  6 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  7 .debug_line   00000423  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   000006e9  00000000  00000000  00020457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000270  00000000  00000000  00020b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000088  00000000  00000000  00020db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0004ff2a  00000000  00000000  00020e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000020  00000000  00000000  00070d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000000bb  00000000  00000000  00070d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      000000a7  00000000  00000000  00070e43  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000000c4  00000000  00000000  00070eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000000ba  00000000  00000000  00070fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SystemInit+0x20>)
 800019a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800019e:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <SystemInit+0x20>)
 80001a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b087      	sub	sp, #28
 80001bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	2302      	movs	r3, #2
 80001d0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	f003 030c 	and.w	r3, r3, #12
 80001da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	2b08      	cmp	r3, #8
 80001e0:	d011      	beq.n	8000206 <SystemCoreClockUpdate+0x4e>
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	2b08      	cmp	r3, #8
 80001e6:	d844      	bhi.n	8000272 <SystemCoreClockUpdate+0xba>
 80001e8:	693b      	ldr	r3, [r7, #16]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d003      	beq.n	80001f6 <SystemCoreClockUpdate+0x3e>
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	2b04      	cmp	r3, #4
 80001f2:	d004      	beq.n	80001fe <SystemCoreClockUpdate+0x46>
 80001f4:	e03d      	b.n	8000272 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 80001fa:	601a      	str	r2, [r3, #0]
      break;
 80001fc:	e03d      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000202:	601a      	str	r2, [r3, #0]
      break;
 8000204:	e039      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000206:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	0d9b      	lsrs	r3, r3, #22
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800021a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d00c      	beq.n	800023c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000222:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	fbb2 f3f3 	udiv	r3, r2, r3
 800022a:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800022c:	6852      	ldr	r2, [r2, #4]
 800022e:	0992      	lsrs	r2, r2, #6
 8000230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e00b      	b.n	8000254 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	fbb2 f3f3 	udiv	r3, r2, r3
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000246:	6852      	ldr	r2, [r2, #4]
 8000248:	0992      	lsrs	r2, r2, #6
 800024a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800024e:	fb02 f303 	mul.w	r3, r2, r3
 8000252:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	0c1b      	lsrs	r3, r3, #16
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	3301      	adds	r3, #1
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800026e:	6013      	str	r3, [r2, #0]
      break;
 8000270:	e003      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	091b      	lsrs	r3, r3, #4
 8000280:	f003 030f 	and.w	r3, r3, #15
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <SystemCoreClockUpdate+0xfc>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	fa22 f303 	lsr.w	r3, r2, r3
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	371c      	adds	r7, #28
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	20000000 	.word	0x20000000
 80002ac:	00f42400 	.word	0x00f42400
 80002b0:	017d7840 	.word	0x017d7840
 80002b4:	08000378 	.word	0x08000378

080002b8 <main>:
#include "main.h"

int main(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0



    while(1)
 80002bc:	e7fe      	b.n	80002bc <main+0x4>

080002be <NMI_Handler>:
    }
    return 0;
}

void  NMI_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
    while(1)
 80002c2:	e7fe      	b.n	80002c2 <NMI_Handler+0x4>

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	4e0d      	ldr	r6, [pc, #52]	; (80002fc <__libc_init_array+0x38>)
 80002c8:	4d0d      	ldr	r5, [pc, #52]	; (8000300 <__libc_init_array+0x3c>)
 80002ca:	1b76      	subs	r6, r6, r5
 80002cc:	10b6      	asrs	r6, r6, #2
 80002ce:	d006      	beq.n	80002de <__libc_init_array+0x1a>
 80002d0:	2400      	movs	r4, #0
 80002d2:	3401      	adds	r4, #1
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d1f9      	bne.n	80002d2 <__libc_init_array+0xe>
 80002de:	4e09      	ldr	r6, [pc, #36]	; (8000304 <__libc_init_array+0x40>)
 80002e0:	4d09      	ldr	r5, [pc, #36]	; (8000308 <__libc_init_array+0x44>)
 80002e2:	1b76      	subs	r6, r6, r5
 80002e4:	f000 f83c 	bl	8000360 <_init>
 80002e8:	10b6      	asrs	r6, r6, #2
 80002ea:	d006      	beq.n	80002fa <__libc_init_array+0x36>
 80002ec:	2400      	movs	r4, #0
 80002ee:	3401      	adds	r4, #1
 80002f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f4:	4798      	blx	r3
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d1f9      	bne.n	80002ee <__libc_init_array+0x2a>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
	...

0800030c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800030c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000310:	f7ff ff40 	bl	8000194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800033a:	f7ff ffc3 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800033e:	f7ff ffbb 	bl	80002b8 <main>
  bx  lr    
 8000342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000344:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000350:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 8000354:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000358:	20000004 	.word	0x20000004

0800035c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
